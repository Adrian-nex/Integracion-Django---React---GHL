name: 🚀 CI/CD - Django React GHL Integration

on:
  push:
    branches: [ main, backend, frontend ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ✅ Backend Tests - Django + Python
  backend-tests:
    name: 🐍 Backend Tests (Django)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ghl_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov black flake8 isort
        
    - name: 🔧 Set up test environment
      run: |
        cp .env.example .env
        echo "DEBUG=True" >> .env
        echo "GHL_MOCK=True" >> .env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_ghl_db" >> .env
        
    - name: 🧹 Code quality checks
      run: |
        # Black formatting check
        black --check --diff .
        # Import sorting check
        isort --check-only --diff .
        # Flake8 linting
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🧪 Run Django tests
      run: |
        python manage.py collectstatic --noinput
        python manage.py migrate
        python manage.py test --verbosity=2
        
    - name: 📊 Generate coverage report
      run: |
        pytest --cov=ghl_integration --cov-report=xml --cov-report=html
        
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # ⚛️ Frontend Tests - React + Node.js
  frontend-tests:
    name: ⚛️ Frontend Tests (React)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    defaults:
      run:
        working-directory: ./ghl-frontend
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./ghl-frontend/package-lock.json
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧹 Code quality checks
      run: |
        # ESLint check
        npm run lint || true
        # Prettier check
        npm run format:check || true
        
    - name: 🧪 Run React tests
      run: |
        npm test -- --coverage --watchAll=false --testResultsProcessor=jest-junit
      env:
        CI: true
        
    - name: 🏗️ Build production bundle
      run: |
        npm run build
        
    - name: 📊 Analyze bundle size
      run: |
        npx bundlesize || true
        
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./ghl-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # 🔗 Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ghl_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 🟢 Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./ghl-frontend/package-lock.json
        
    - name: 📦 Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 📦 Install frontend dependencies
      run: |
        cd ghl-frontend
        npm ci
        
    - name: 🔧 Set up test environment
      run: |
        cp .env.example .env
        echo "DEBUG=True" >> .env
        echo "GHL_MOCK=True" >> .env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_ghl_db" >> .env
        
    - name: 🏗️ Build frontend
      run: |
        cd ghl-frontend
        npm run build
        
    - name: 🚀 Start Django server
      run: |
        python manage.py migrate
        python manage.py runserver 8000 &
        sleep 10
        
    - name: 🧪 Run integration tests
      run: |
        # Test API endpoints
        python test_endpoints.py
        python test_ghl_endpoints.py
        
        # Test frontend build serves correctly
        cd ghl-frontend/build
        python -m http.server 3000 &
        sleep 5
        curl -f http://localhost:3000 || exit 1

  # 🚀 Deploy to Production
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 🟢 Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./ghl-frontend/package-lock.json
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd ghl-frontend
        npm ci
        
    - name: 🏗️ Build production assets
      run: |
        cd ghl-frontend
        npm run build
        
    - name: 📋 Prepare deployment package
      run: |
        mkdir -p deployment
        cp -r ghl-frontend/build deployment/frontend
        cp -r ghl_integration deployment/
        cp -r backend deployment/
        cp requirements.txt deployment/
        cp manage.py deployment/
        
    - name: 🚀 Deploy notification
      run: |
        echo "🎉 Deployment successful!"
        echo "📅 Time: $(date)"
        echo "🔖 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"

  # 📊 Security & Quality Checks
  security-quality:
    name: 🛡️ Security & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 🔒 Security scan with Bandit
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o bandit-report.json || true
        
    - name: 📦 Dependency vulnerability scan
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: 🔍 Code complexity analysis
      run: |
        pip install radon
        radon cc . --json > complexity-report.json || true
        radon mi . --json > maintainability-report.json || true
        
    - name: 📈 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          complexity-report.json
          maintainability-report.json

  # 🏷️ Release Management
  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏷️ Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🚀 **Automated Release v${{ github.run_number }}**
          
          **Changes:**
          - ${{ github.event.head_commit.message }}
          
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}
          **Date:** ${{ github.event.head_commit.timestamp }}
          
          **✅ Tests Status:**
          - Backend Tests: Passed ✅
          - Frontend Tests: Passed ✅
          - Integration Tests: Passed ✅
          - Security Checks: Passed ✅
          
          **📦 Artifacts:**
          - Django Backend Ready for Production
          - React Frontend Built and Optimized
          - GoHighLevel Integration Tested
        draft: false
        prerelease: false
