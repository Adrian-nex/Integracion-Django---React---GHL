name: 🔍 Pull Request Checks

on:
  pull_request:
    branches: [ main, backend, frontend ]
    types: [opened, synchronize, reopened]

jobs:
  # 📝 PR Info & Validation
  pr-validation:
    name: 📝 PR Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📋 PR Information
      run: |
        echo "## 📋 Pull Request Information" >> $GITHUB_STEP_SUMMARY
        echo "**Title:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
        echo "**Author:** ${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**Files Changed:** ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY
        echo "**Additions:** +${{ github.event.pull_request.additions }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deletions:** -${{ github.event.pull_request.deletions }}" >> $GITHUB_STEP_SUMMARY
        
    - name: 🔍 Check PR title format
      run: |
        title="${{ github.event.pull_request.title }}"
        if [[ ! "$title" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+ ]]; then
          echo "❌ PR title should follow conventional commits format:"
          echo "   feat(scope): description"
          echo "   fix(scope): description"
          echo "   docs: description"
          echo "   etc."
          exit 1
        fi
        echo "✅ PR title format is valid"
        
    - name: 📏 Check PR size
      run: |
        changes=${{ github.event.pull_request.additions }}
        if [ $changes -gt 1000 ]; then
          echo "⚠️ This PR is quite large ($changes additions). Consider breaking it into smaller PRs."
          echo "Large PRs are harder to review and more prone to bugs."
        else
          echo "✅ PR size is reasonable ($changes additions)"
        fi

  # 🧪 Quick Tests
  quick-tests:
    name: 🧪 Quick Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 🟢 Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./ghl-frontend/package-lock.json
        
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 isort
        
    - name: 📦 Install Node dependencies
      run: |
        cd ghl-frontend
        npm ci
        
    - name: 🧹 Python code style check
      run: |
        echo "## 🐍 Python Code Style" >> $GITHUB_STEP_SUMMARY
        # Black formatting
        if black --check --diff .; then
          echo "✅ Black formatting: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Black formatting: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "Run: \`black .\` to fix formatting issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Import sorting
        if isort --check-only --diff .; then
          echo "✅ Import sorting: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Import sorting: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "Run: \`isort .\` to fix import issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Linting
        if flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics; then
          echo "✅ Flake8 linting: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Flake8 linting: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 🧹 JavaScript/React code style check
      run: |
        cd ghl-frontend
        echo "## ⚛️ React Code Style" >> $GITHUB_STEP_SUMMARY
        
        # ESLint (if configured)
        if npm run lint; then
          echo "✅ ESLint: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ ESLint: Check needed (or not configured)" >> $GITHUB_STEP_SUMMARY
        fi || true
        
        # Build check
        if npm run build; then
          echo "✅ Build: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Build: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 🔍 Detect sensitive files
      run: |
        echo "## 🔒 Security Check" >> $GITHUB_STEP_SUMMARY
        
        # Check for sensitive files
        sensitive_files=$(find . -name "*.key" -o -name "*.pem" -o -name ".env" -not -path "./.env.example" | grep -v ".env.example" || true)
        
        if [ -n "$sensitive_files" ]; then
          echo "⚠️ **Sensitive files detected:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$sensitive_files" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Please review these files and ensure no secrets are committed." >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No sensitive files detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for hardcoded secrets patterns
        secret_patterns=$(grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]{8,}" --include="*.py" --include="*.js" --include="*.jsx" . | grep -v ".env.example" | grep -v "test" || true)
        
        if [ -n "$secret_patterns" ]; then
          echo "⚠️ **Potential hardcoded secrets found:**" >> $GITHUB_STEP_SUMMARY
          echo "Please review and use environment variables instead." >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No hardcoded secrets detected" >> $GITHUB_STEP_SUMMARY
        fi

  # 📊 Code Coverage
  coverage-check:
    name: 📊 Coverage Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: 🔧 Set up test environment
      run: |
        cp .env.example .env
        echo "DEBUG=True" >> .env
        echo "GHL_MOCK=True" >> .env
        
    - name: 📊 Generate coverage report
      run: |
        pytest --cov=ghl_integration --cov-report=term --cov-report=html
        coverage_percent=$(coverage report | tail -1 | awk '{print $4}' | sed 's/%//')
        echo "COVERAGE_PERCENT=$coverage_percent" >> $GITHUB_ENV
        
    - name: 📈 Coverage summary
      run: |
        echo "## 📊 Code Coverage" >> $GITHUB_STEP_SUMMARY
        echo "**Current Coverage:** ${{ env.COVERAGE_PERCENT }}%" >> $GITHUB_STEP_SUMMARY
        
        if (( $(echo "${{ env.COVERAGE_PERCENT }} >= 80" | bc -l) )); then
          echo "✅ Coverage is good (≥80%)" >> $GITHUB_STEP_SUMMARY
        elif (( $(echo "${{ env.COVERAGE_PERCENT }} >= 60" | bc -l) )); then
          echo "⚠️ Coverage could be better (60-80%)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Coverage is low (<60%)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "**Goal:** Maintain coverage above 80%" >> $GITHUB_STEP_SUMMARY

  # ✅ PR Summary
  pr-summary:
    name: ✅ PR Summary
    runs-on: ubuntu-latest
    needs: [pr-validation, quick-tests, coverage-check]
    if: always()
    
    steps:
    - name: 📝 Create PR comment
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🤖 PR Checks Summary')
          );
          
          const summary = `## 🤖 PR Checks Summary
          
          **PR:** ${{ github.event.pull_request.title }}
          **Author:** @${{ github.event.pull_request.user.login }}
          **Status:** ${{ needs.pr-validation.result == 'success' && needs.quick-tests.result == 'success' && needs.coverage-check.result == 'success' && '✅ Ready for Review' || '❌ Needs Attention' }}
          
          ### 📋 Check Results:
          - **Validation:** ${{ needs.pr-validation.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Code Style:** ${{ needs.quick-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Coverage:** ${{ needs.coverage-check.result == 'success' && '✅ Passed' || '❌ Failed' }}
          
          ### 📊 Stats:
          - **Files Changed:** ${{ github.event.pull_request.changed_files }}
          - **Additions:** +${{ github.event.pull_request.additions }}
          - **Deletions:** -${{ github.event.pull_request.deletions }}
          
          ---
          *Updated automatically on every push*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: summary
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
          }
